name: Change java files for AB-Formula-option-1
description: >-
  The changes migrate the file upload functionality from AWS S3 to Azure Blob
  Storage, introducing Azure-specific configurations and metadata related config
  handling.
codeLocation:
  type: textsearch
  codePattern: >-
    java\.util\.HashMap|java\.util\.Map|java\.util\.Random|com\.azure\.identity\.DefaultAzureCredentialBuilder|software\.amazon\.awssdk\.core\.waiters\.WaiterResponse|software\.amazon\.awssdk\.regions\.Region|software\.amazon\.awssdk\.services\.s3\.S3Client|software\.amazon\.awssdk\.services\.s3\.paginators\.ListObjectsV2Iterable|software\.amazon\.awssdk\.core\.sync\.RequestBody|software\.amazon\.awssdk\.services\.s3\.model\.S3Exception|software\.amazon\.awssdk\.services\.s3\.model\.PutObjectRequest|software\.amazon\.awssdk\.services\.s3\.model\.ListObjectsV2Request|software\.amazon\.awssdk\.services\.s3\.model\.ListObjectsV2Response|software\.amazon\.awssdk\.services\.s3\.model\.S3Object|software\.amazon\.awssdk\.services\.s3\.model\.GetObjectRequest|software\.amazon\.awssdk\.services\.s3\.model\.DeleteObjectRequest|software\.amazon\.awssdk\.services\.s3\.model\.DeleteBucketRequest|software\.amazon\.awssdk\.services\.s3\.model\.CreateMultipartUploadRequest|software\.amazon\.awssdk\.services\.s3\.model\.CreateMultipartUploadResponse|software\.amazon\.awssdk\.services\.s3\.model\.CompletedMultipartUpload|software\.amazon\.awssdk\.services\.s3\.model\.CreateBucketRequest|software\.amazon\.awssdk\.services\.s3\.model\.CompletedPart|software\.amazon\.awssdk\.services\.s3\.model\.CreateBucketConfiguration|software\.amazon\.awssdk\.services\.s3\.model\.UploadPartRequest|software\.amazon\.awssdk\.services\.s3\.model\.CompleteMultipartUploadRequest|software\.amazon\.awssdk\.services\.s3\.waiters\.S3Waiter|software\.amazon\.awssdk\.services\.s3\.model\.HeadBucketRequest|software\.amazon\.awssdk\.services\.s3\.model\.HeadBucketResponse|java\.io\.IOException|public\s+static\s+void\s+uploadImage\(String\s+.*,\s+InputStream\s+.*\)
  filePattern: '**/*.java'
steps:
  - description: '9fe29333: B-custom-attach-metadata'
    type: diff
    content: >
      diff --git a/original/B.java b/original/B.java

      index 2ba58d7..ad7fb4f 100644

      --- a/original/B.java

      +++ b/original/B.java

      @@ -5,4 +5,6 @@ import java.nio.ByteBuffer;

      -import java.util.HashMap;

      -import java.util.Map;

      -import java.util.Random;

      -import com.azure.identity.DefaultAzureCredentialBuilder;

      +import java.nio.charset.StandardCharsets;

      +import java.time.Duration;

      +import java.time.Instant;

      +import java.time.OffsetDateTime;

      +import java.util.*;

      +

      @@ -12,0 +15,4 @@ import com.azure.storage.blob.BlobServiceClientBuilder;

      +import com.azure.storage.blob.models.AccessTier;

      +import com.azure.storage.blob.models.BlobHttpHeaders;

      +import com.azure.storage.blob.models.BlobRequestConditions;

      +import com.azure.storage.blob.models.ParallelTransferOptions;

      @@ -21,2 +27 @@ public class UploadObject2 {

      -        File initialFile = new
      File("src/main/webapp/service_provider_pfp_images/abc.txt");

      -        InputStream targetStream = new FileInputStream(initialFile);

      +        String filePath =
      "src/main/webapp/service_provider_pfp_images/abc.txt";

      @@ -33,2 +38,18 @@ public class UploadObject2 {

      -        System.out.println("stream available is " +
      targetStream.available());

      -        blobClient.upload(targetStream, targetStream.available(), true);

      +        BlobHttpHeaders headers = new BlobHttpHeaders()

      +                .setContentMd5("data".getBytes(StandardCharsets.UTF_8))

      +                .setContentLanguage("en-US")

      +                .setContentType("binary");

      +

      +        Map<String, String> metadata =
      Collections.singletonMap("timestamp", Instant.now().toString());

      +        BlobRequestConditions requestConditions = new
      BlobRequestConditions()

      +                .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));

      +        Long blockSize = 100L * 1024L * 1024L; // 100 MB;

      +        ParallelTransferOptions parallelTransferOptions = new
      ParallelTransferOptions().setBlockSizeLong(blockSize);

      +

      +        try {

      +            blobClient.uploadFromFile(filePath, parallelTransferOptions,
      headers, metadata,

      +                    AccessTier.HOT, requestConditions,
      Duration.ofSeconds(60));

      +            System.out.println("Upload from file succeeded");

      +        } catch (UncheckedIOException ex) {

      +            System.err.printf("Failed to upload from file %s%n",
      ex.getMessage());

      +        }

      @@ -37 +58 @@ public class UploadObject2 {

      -    public static void uploadImage(String fileObjectKeyName, InputStream
      stream) throws IOException {

      +    public static void uploadImage(String fileObjectKeyName, String
      filePath) throws IOException {

      @@ -47 +68,18 @@ public class UploadObject2 {

      -        blobClient.upload(stream, getInputStreamLength(stream), true);

      +        BlobHttpHeaders headers = new BlobHttpHeaders()

      +                .setContentMd5("data".getBytes(StandardCharsets.UTF_8))

      +                .setContentLanguage("en-US")

      +                .setContentType("binary");

      +

      +        Map<String, String> metadata =
      Collections.singletonMap("timestamp", Instant.now().toString());

      +        BlobRequestConditions requestConditions = new
      BlobRequestConditions()

      +                .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));

      +        Long blockSize = 100L * 1024L * 1024L; // 100 MB;

      +        ParallelTransferOptions parallelTransferOptions = new
      ParallelTransferOptions().setBlockSizeLong(blockSize);

      +

      +        try {

      +            blobClient.uploadFromFile(filePath, parallelTransferOptions,
      headers, metadata,

      +                    AccessTier.HOT, requestConditions,
      Duration.ofSeconds(60));

      +            System.out.println("Upload from file succeeded");

      +        } catch (UncheckedIOException ex) {

      +            System.err.printf("Failed to upload from file %s%n",
      ex.getMessage());

      +        }
  - description: 'e54db650: option1-migrate-B'
    type: diff
    content: >
      diff --git a/original/B.java b/original/B.java

      index dff29b3..2ba58d7 100644

      --- a/original/B.java

      +++ b/original/B.java

      @@ -8,27 +8,5 @@ import java.util.Random;

      -import software.amazon.awssdk.core.waiters.WaiterResponse;

      -import software.amazon.awssdk.regions.Region;

      -import software.amazon.awssdk.services.s3.S3Client;

      -import
      software.amazon.awssdk.services.s3.paginators.ListObjectsV2Iterable;

      -import software.amazon.awssdk.core.sync.RequestBody;

      -import software.amazon.awssdk.services.s3.model.S3Exception;

      -import software.amazon.awssdk.services.s3.model.PutObjectRequest;

      -import software.amazon.awssdk.services.s3.model.ListObjectsV2Request;

      -import software.amazon.awssdk.services.s3.model.ListObjectsV2Response;

      -import software.amazon.awssdk.services.s3.model.S3Object;

      -import software.amazon.awssdk.services.s3.model.GetObjectRequest;

      -import software.amazon.awssdk.services.s3.model.DeleteObjectRequest;

      -import software.amazon.awssdk.services.s3.model.DeleteBucketRequest;

      -import
      software.amazon.awssdk.services.s3.model.CreateMultipartUploadRequest;

      -import
      software.amazon.awssdk.services.s3.model.CreateMultipartUploadResponse;

      -import software.amazon.awssdk.services.s3.model.CompletedMultipartUpload;

      -import software.amazon.awssdk.services.s3.model.CreateBucketRequest;

      -import software.amazon.awssdk.services.s3.model.CompletedPart;

      -import
      software.amazon.awssdk.services.s3.model.CreateBucketConfiguration;

      -import software.amazon.awssdk.services.s3.model.UploadPartRequest;

      -import
      software.amazon.awssdk.services.s3.model.CompleteMultipartUploadRequest;

      -import software.amazon.awssdk.services.s3.waiters.S3Waiter;

      -import software.amazon.awssdk.services.s3.model.HeadBucketRequest;

      -import software.amazon.awssdk.services.s3.model.HeadBucketResponse;

      -

      -

      -import java.io.IOException;

      +import com.azure.identity.DefaultAzureCredentialBuilder;

      +import com.azure.storage.blob.BlobClient;

      +import com.azure.storage.blob.BlobContainerClient;

      +import com.azure.storage.blob.BlobServiceClient;

      +import com.azure.storage.blob.BlobServiceClientBuilder;

      @@ -40,0 +19 @@ public class UploadObject2 {

      +

      @@ -45,15 +24,8 @@ public class UploadObject2 {

      -        String bucketName = "testbucket3rag";

      -        Region region = Region.EU_NORTH_1;

      -        S3Client s3 = S3Client.builder()

      -                .region(region)

      -                .build();

      -        Map<String, String> metadata = new HashMap<>();

      -        metadata.put("x-amz-meta-myVal", "test");

      -        PutObjectRequest objectRequest = PutObjectRequest.builder()

      -                .bucket(bucketName)

      -                .key(fileObjectKeyName)

      -                .metadata(metadata)

      -                .build();

      -        System.out.println("stream available is
      "+targetStream.available());

      -//        System.out.println("stream size is
      "+getInputStreamLength(targetStream));

      -        s3.putObject(objectRequest,
      RequestBody.fromInputStream(targetStream,targetStream.available()));

      +        String containerName = "testcontainer";

      +        String connectionString =
      "DefaultEndpointsProtocol=https;AccountName=yourstorageaccount;AccountKey=youraccountkey;EndpointSuffix=core.windows.net";

      +

      +        BlobServiceClient blobServiceClient = new
      BlobServiceClientBuilder()

      +                .connectionString(connectionString)

      +                .buildClient();

      +        BlobContainerClient containerClient =
      blobServiceClient.getBlobContainerClient(containerName);

      +        BlobClient blobClient =
      containerClient.getBlobClient(fileObjectKeyName);

      @@ -60,0 +33,2 @@ public class UploadObject2 {

      +        System.out.println("stream available is " +
      targetStream.available());

      +        blobClient.upload(targetStream, targetStream.available(), true);

      @@ -61,0 +36 @@ public class UploadObject2 {

      +

      @@ -63,5 +38,2 @@ public class UploadObject2 {

      -        String bucketName = "testbucket3rag";

      -        Region region = Region.EU_NORTH_1;

      -        S3Client s3 = S3Client.builder()

      -                .region(region)

      -                .build();

      +        String containerName = "testcontainer";

      +        String connectionString =
      "DefaultEndpointsProtocol=https;AccountName=yourstorageaccount;AccountKey=youraccountkey;EndpointSuffix=core.windows.net";

      @@ -68,0 +41,5 @@ public class UploadObject2 {

      +        BlobServiceClient blobServiceClient = new
      BlobServiceClientBuilder()

      +                .connectionString(connectionString)

      +                .buildClient();

      +        BlobContainerClient containerClient =
      blobServiceClient.getBlobContainerClient(containerName);

      +        BlobClient blobClient =
      containerClient.getBlobClient(fileObjectKeyName);

      @@ -70,5 +47 @@ public class UploadObject2 {

      -        PutObjectRequest objectRequest = PutObjectRequest.builder()

      -                .bucket(bucketName)

      -                .key(fileObjectKeyName)

      -                .build();

      -        s3.putObject(objectRequest,
      RequestBody.fromInputStream(stream,getInputStreamLength(stream)));

      +        blobClient.upload(stream, getInputStreamLength(stream), true);

      @@ -75,0 +49 @@ public class UploadObject2 {

      +

      @@ -84,0 +59 @@ public class UploadObject2 {

      +
